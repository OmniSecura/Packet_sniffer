Packet Sniffer Feature Overview
================================

1. Capture session lifecycle
----------------------------
- The main toolbar exposes interface selection, BPF filter input, a promiscuous mode toggle, and Start/Stop controls. `MainWindow::setupUI` wires these widgets so the Start button launches a dedicated capture worker thread while the Stop button tears it down, re-enabling file operations and session management actions when idle.【F:src/gui/mainwindow_ui.cpp†L13-L124】【F:src/gui/mainwindow_sniffing.cpp†L5-L74】
- `MainWindow::startSniffing` instantiates a `PacketWorker` with the chosen interface, filter string, and promiscuous flag, records the session start time, initializes per-second statistics, and starts both a GUI timer (for session duration) and a background JSON autosave timer.【F:src/gui/mainwindow_sniffing.cpp†L5-L45】
- The worker lives in a `QThread`, opened by `PacketWorker::process`. It opens the interface via `Devices::init_packet_capture`, records the libpcap-reported link type, compiles and applies the current filter through the `Filters` helper (lookup netmask, compile, set filter), then enters a `pcap_dispatch` loop until `PacketWorker::stop` flips an atomic flag or an error occurs.【F:src/packetworker.cpp†L5-L68】【F:devices/devices.cpp†L1-L20】【F:filter/filter.cpp†L11-L35】
- Incoming frames are routed through the static `Sniffing::packet_callback`, which captures raw bytes, attaches link-type metadata, appends them to a global packet buffer for later persistence, builds a timestamp/length info list, and emits the `newPacket` signal on the worker so the GUI can render the row immediately.【F:packets/sniffing.cpp†L33-L58】
- Stopping capture gracefully joins the worker thread, stops timers, persists accumulated statistics and the PCAP file (see section 7), and resets state for the next session.【F:src/gui/mainwindow_sniffing.cpp†L46-L94】
- Live filter updates are routed through `MainWindow::onFilterTextChanged`, which invokes `PacketWorker::updateFilter` on the worker thread to recompile and apply a new BPF expression without restarting capture.【F:src/gui/mainwindow_sniffing.cpp†L96-L104】【F:src/packetworker.cpp†L70-L91】

2. Packet decoding and enrichment pipeline
------------------------------------------
- Every captured frame is summarized in `MainWindow::handlePacket`. It timestamps the arrival, asks `Sniffing::packetSummary` for source, destination, protocol, and payload length, and builds the table row. Each row stores both the human-readable columns and the raw bytes/link type in `PacketTableRow` so later actions (details view, exporting) have the original data.【F:src/gui/mainwindow_sniffing.cpp†L73-L142】【F:src/PacketTableModel.h†L12-L39】
- `PacketTableModel` exposes the data to the `QTableView`, including per-row background colors (set by coloring rules or annotations) and the raw payload in `Qt::UserRole` for downstream consumers.【F:src/PacketTableModel.cpp†L1-L63】
- When a user selects a row, `MainWindow::onPacketClicked` feeds the stored raw bytes to `Sniffing::parseLayers`. That routine inspects link type (Ethernet II vs Linux cooked capture) and constructs a hierarchy of `PacketLayer` objects describing each parsed protocol header (Ethernet, IPv4/IPv6, TCP, UDP, ICMP variants, MPLS, IPsec, OSPF/RSVP/PIM, etc.). `addLayerToTree` groups these fields by category and populates the tree widget so headers and options expand naturally.【F:src/gui/mainwindow_packets.cpp†L9-L65】【F:packets/sniffing.cpp†L226-L502】【F:packets/packethelpers.h†L64-L135】
- Payload bytes after the link/IP headers are rendered via `Sniffing::toHexAscii`, producing a dual hex + ASCII dump in the bottom-right `QTextEdit` for forensic inspection.【F:src/gui/mainwindow_packets.cpp†L59-L66】【F:packets/sniffing.cpp†L60-L108】
- Detailed protocol-specific information for the “Info” column is calculated by `MainWindow::infoColumn`, which delegates to the appropriate `Sniffing::parseX` helper (TCP flags, UDP ports, ARP fields, ICMP messages, IPv6 extension headers, tunneling protocols, etc.) based on the protocol name from the summary. Each helper returns canonicalized strings for display and later reporting.【F:src/gui/mainwindow_packets.cpp†L68-L131】【F:packets/sniffing.cpp†L110-L401】

3. Interface layout, navigation, and menus
-----------------------------------------
- The central splitter layout combines the packet table (top-left), live GeoMap (bottom-left), protocol tree (top-right), hex view (middle-right), and top-5 pie chart (bottom-right). Stretch factors favor detailed analysis panes while keeping the map visible for geographic context.【F:src/gui/mainwindow_ui.cpp†L13-L83】
- The status bar tracks total packets, session duration (updated once per second by `MainWindow::updateSessionTime`), and displays a combobox listing the current top five protocols with live counts; these values are synchronized with the pie chart widget.【F:src/gui/mainwindow_ui.cpp†L173-L208】【F:src/gui/mainwindow_packets.cpp†L211-L239】
- Menu actions expose file operations (open/save PCAP, start fresh session), capture shortcuts, statistics dialogs, reporting placeholders, theme management, coloring import/export, and help/about content. Theme toggling updates the action text using `Theme::toggleActionText` so the label always offers the opposite mode.【F:src/gui/mainwindow_ui.cpp†L85-L171】【F:src/gui/mainwindow_packets.cpp†L195-L209】

4. Packet coloring rules and customization
------------------------------------------
- `PacketColorizer` maintains user-defined BPF rules paired with colors. When `MainWindow::handlePacket` inserts a row it hands the libpcap header and payload to `PacketColorizer::colorFor` so matching rules tint the entire row.【F:src/gui/mainwindow_sniffing.cpp†L118-L140】【F:src/coloring/packetcolorizer.cpp†L1-L53】
- Rules persist between runs via QSettings. Users can export/import rule sets as JSON, triggered by View menu actions that wrap `PacketColorizer::saveRulesToJson`/`loadRulesFromJson`. Imported sets are saved back into settings to become the new default palette.【F:src/gui/mainwindow_ui.cpp†L133-L154】【F:src/coloring/packetcolorizer.cpp†L55-L104】
- The “Customize coloring…” action opens `CustomizerDialog`, providing Add/Edit/Remove flows that prompt for a BPF expression and color selection. It previews each rule with background/foreground contrast logic and returns the edited vector to replace the active rule set.【F:src/gui/mainwindow_packets.cpp†L134-L148】【F:src/coloring/customizerdialog.cpp†L1-L103】

5. Selection reporting and annotations
--------------------------------------
- Right-clicking the packet table shows a context menu with per-field filter shortcuts and a “Reporting…” entry. Choosing it instantiates `SelectionAnnotationDialog` with summaries for the selected rows.【F:src/gui/mainwindow_packets.cpp†L150-L211】
- Inside the dialog, analysts can assign threat levels, recommended actions, global tags, and per-packet tags/colors. Highlight colors preview immediately in the table and propagate back to the main view via `PacketTableModel::setRowBackground`. Default tags are generated from the threat level (e.g., “suspicious”, “malware”).【F:src/gui/selectionannotationdialog.cpp†L1-L231】【F:src/gui/mainwindow_packets.cpp†L212-L238】
- Accepting the dialog builds a `PacketAnnotation` struct and saves it to disk under `reporting/` as formatted JSON, including tagged packet metadata and ARGB highlight colors. The status bar confirms the saved report name and packet count.【F:src/gui/mainwindow_packets.cpp†L212-L271】

6. Geolocation overlays and timeline explorer
---------------------------------------------
- For single-packet views the embedded `GeoMapWidget` highlights ISO-coded countries and can animate an arc (“flight path”) between source and destination coordinates using `displayFlightPath`. Overlay items (markers, animated plane, labels) are lazily created and reused for smooth transitions.【F:src/gui/mainwindow_packets.cpp†L33-L57】【F:packets/packet_geolocation/GeoMap.cpp†L45-L199】
- The Statistics menu’s “GeoOverview” opens `GeoOverviewDialog`, a comprehensive timeline browser. Users pick an IP (from stored session data or manual entry), optionally constrain by time range, and load events aggregated per second from saved session JSON files. Each event includes throughput metrics, per-second protocol counts, and MaxMind-enriched geography for both endpoints.【F:src/gui/mainwindow_ui.cpp†L118-L132】【F:src/statistics/geooverviewdialog.cpp†L1-L332】
- The dialog presents playback controls (play/pause/previous/next), a slider, and a list of events. Selecting an entry updates the map (highlight + optional animated path if coordinates exist), headline, and detailed metrics. Auto-play advances to the next event once the flight animation finishes, looping if necessary.【F:src/statistics/geooverviewdialog.cpp†L333-L613】
- IP selection is streamlined with a searchable combo box populated by scanning stored sessions for unique addresses. The dialog also handles empty states, lack of data in the requested range, and gracefully stops playback if animation cannot be rendered.【F:src/statistics/geooverviewdialog.cpp†L93-L206】【F:src/statistics/geooverviewdialog.cpp†L246-L332】

7. Statistics collection, storage, and visualization
----------------------------------------------------
- `Statistics::recordPacket` aggregates counts per second: protocol tallies, distinct connections, total bytes, packets, and average packet size. The object is created when capture starts and updated for each incoming row.【F:src/statistics/statistics.cpp†L13-L36】【F:src/gui/mainwindow_sniffing.cpp†L106-L140】
- Periodically and at capture end, `Statistics::SaveStatsToJson` writes a session JSON (named `start-end.json`) under `src/statistics/sessions`. Files store session metadata and per-second arrays that fuel both the GeoOverview dialog and charts. When a session is overwritten, the previous file is removed so only the freshest data persists; the last saved path is cached for later use.【F:src/statistics/statistics.cpp†L38-L87】
- The pie chart in the main window shows the live top five protocols. It blends with user-defined coloring rules (matching rule colors trump defaults) and offers tooltips with percentage breakdowns when hovering over slices.【F:src/statistics/charts/pieChart.cpp†L1-L158】【F:src/gui/mainwindow_packets.cpp†L224-L239】
- `StatsDialog` provides bar and line chart tabs. The bar chart aggregates protocol counts with modes for all-time/current session/specific session, protocol filtering, alphabetical/value sorting, and session selection. It listens to filesystem changes so newly saved sessions appear without restarting.【F:src/statistics/statsdialog.cpp†L1-L170】【F:src/statistics/charts/barchart.cpp†L1-L215】
- The line chart plots packets/bytes/bits per second or average packet size over time, with resolution buckets (seconds/minutes/hours), zoom via Ctrl+mouse wheel, and tooltips for precise buckets. Both charts support exporting PNG snapshots and CSV data dumps via the dialog’s File menu.【F:src/statistics/statsdialog.cpp†L9-L89】【F:src/statistics/charts/linechart.cpp†L1-L215】

8. Session persistence and offline analysis
-------------------------------------------
- When capture stops, `MainWindow::persistCurrentSession` writes the statistics JSON and leverages `Sniffing::saveToPcap` to dump the in-memory packet buffer to a `.pcap` alongside the stats file, ensuring the session manager has synchronized artifacts.【F:src/mainwindow.cpp†L65-L94】【F:packets/sniffing.cpp†L522-L594】
- `SessionStorage::listSessions` scans the sessions directory, parses each JSON to summarize packet counts, total bytes, distinct protocols, and whether the sibling PCAP exists. Display names combine ISO-formatted start/end timestamps for quick identification.【F:src/statistics/sessionstorage.cpp†L22-L97】
- `SessionManagerDialog` lists these sessions in a sortable table, highlighting missing PCAPs, and uses a filesystem watcher to refresh automatically. Double-clicking or pressing Open returns the chosen record to the main window, which then loads packets via `loadOfflineSession` (rebuilding the UI as though they arrived live).【F:src/statistics/sessionmanagerdialog.cpp†L1-L116】【F:src/mainwindow.cpp†L96-L163】
- Loading a session clears current state, resets timers based on recorded start/end times, and replays each captured packet (using `Sniffing::appendPacket` and `handlePacket`) so all charts, counts, and the geolocation map match the original capture.【F:src/mainwindow.cpp†L121-L163】

9. Preferences and theme management
-----------------------------------
- `AppSettings` abstracts persistent preferences stored via QSettings: default interface, promiscuous flag, auto-start behavior, theme selection, default filter, and reports directory. Widgets in the main window update these settings on change, and `loadPreferences` applies them at startup (including optional auto-start of capture).【F:src/appsettings.cpp†L1-L66】【F:src/mainwindow.cpp†L30-L62】
- The Preferences dialog lets users change these values interactively, including browsing for a report directory and choosing among built-in or previously saved themes. Accepting writes back through the `AppSettings` API and reapplies the selected palette immediately.【F:src/gui/preferencesdialog.cpp†L1-L96】
- Theme handling supports Light/Dark toggles plus additional palettes (Greenish, Black+Orange) and arbitrary custom palettes persisted as JSON blobs in settings. `Theme::loadTheme` installs the chosen palette on application startup, while `Theme::toggleTheme` flips between Light and Dark modes and updates menu text accordingly.【F:src/theme/theme.cpp†L1-L140】

10. Filtering, helpers, and protocol coverage
---------------------------------------------
- `Filters::filter_processing` wraps libpcap’s compile/set sequence so both live capture and runtime filter changes share the same error-handled routine. Netmask lookup failures fall back to zeroed masks for robustness.【F:filter/filter.cpp†L11-L35】
- `protocols/proto_struct.h` defines packed structs for a wide spectrum of link/network/transport protocols (Ethernet, VLAN, PPP variants, ARP, IPv4/IPv6 and extensions, TCP/UDP/SCTP, ICMP/IGMP, IPsec, MPLS, GRE, RSVP, OSPF, etc.). The parsing helpers in `packethelpers.h` expose typed header accessors and utility functions (MAC formatting, IPv4/IPv6 payload offsets, protocol name lookup) used throughout the decoding pipeline.【F:protocols/proto_struct.h†L1-L140】【F:packets/packethelpers.h†L1-L168】
- `Sniffing` implements dedicated parsers for each supported protocol, returning ready-to-display field strings. Many parsers resolve enumerations into descriptive labels (ICMP/ICMPv6 message types, PIM versions, GRE flags, IPv6 extension headers) so analysts see meaningful text rather than raw numbers.【F:packets/sniffing.cpp†L110-L401】
- The hex/ASCII renderer inserts byte offsets, groups bytes with mid-line spacing, and replaces non-printable characters with periods, mimicking Wireshark-style dumps for familiarity.【F:packets/sniffing.cpp†L60-L108】